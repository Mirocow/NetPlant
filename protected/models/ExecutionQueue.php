<?php

class ExecutionQueue extends CActiveRecord {

	public $script = null;
	public $indexInQueue = null;

	public static $globalQueue = array();

	/**
	 * Returns the static model of the specified AR class.
	 * @return Config the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return '{{ExecutionQueue}}';
	}


	public function relations() {
		return array(
				'user' => array(self::BELONGS_TO, "User", "User_id"),
			);
	}

	public function rules() {
		return array(
				array('complete, User_id', 'numerical', 'integerOnly'=>true),
				array('dateAdded, dateComplete, comment', 'safe'),
			);
	}

	public function search()
    {
    	$t = $this->getTableAlias(false,false);

        $criteria=new CDbCriteria;
     
        $criteria->compare($t.'.id',$this->id);
        $criteria->compare($t.'.complete',$this->complete);
        $criteria->compare($t.'.dateAdded', $this->dateAdded, true);
        $criteria->compare($t.'.dateComplete', $this->dateComplete, true);
        $criteria->compare($t.'.comment', $this->comment, true);


        $criteria->together = true;
 
        return new CActiveDataProvider($this, array(
                'criteria'=>$criteria,
                'sort'=>array(
                    'defaultOrder' => 't.dateAdded DESC',
                    'attributes'=>array(
                        '*',
                    ),
                ),
                'pagination'=>array(
                    'pageSize'=>20,
                ),

        ));
    }

    /**
     * Starts new execution queue under current loginned user
     * @param $comment string Internal comment. Used mostlyfor debug purposes.
     * @return ExecutionQueue model
     */
    public static function startNew($comment) {
    	$user = Yii::app()->getModule("User")->user;
    	if (!is_object($user)) {
    		throw new CHttpException(403, "Forbidden.");
    	}

    	$index = count(ExecutionQueue::$globalQueue);

    	$model = new ExecutionQueue;
    	$model->comment = $comment;
    	$model->User_id = $user->id;
    	$model->indexInQueue = $index;

    	$model->save();
    	$model->script = "#!/bin/bash\n\n# autogenerated script of NetPlant\n# ExecutionQueue ID: " . $model->id . "\n\n";
    	ExecutionQueue::$globalQueue[$index] = $model;
    	return ExecutionQueue::$globalQueue[$index];
    }

    /**
     * Commit changes:
     * - fill script file with needed contents
     * - remove from queue
     */
    public function commit() {

    	if (!file_exists(Yii::getPathOfAlias('webroot.scripts.queue'))) {
    		@mkdir(Yii::getPathOfAlias('webroot.scripts.queue'));
    	}
    	$filename = Yii::getPathOfAlias('webroot.scripts.queue')."/".$this->id.".sh";
    	file_put_contents($filename, $this->script);
    	@chmod($filename, 0755);
    	unset(ExecutionQueue::$globalQueue[$this->indexInQueue]);

    }

    /**
     * Commit all queue
     * @return true Always true. I know that's bad, but error catching will be added later.
     */
    public static function commitAll() {
    	if (isset(ExecutionQueue::$globalQueue)) {
    		$array = array_merge(array(), ExecutionQueue::$globalQueue);

	    	foreach ($array as $index => $model) {
	    		$model->commit();
	    	}
	    }
	    return true;
    }

    public static function getLast($comment="No comment equals bad code style.") {
    	if (isset(ExecutionQueue::$globalQueue)) {
    		if (count(ExecutionQueue::$globalQueue) > 0) {
    			return end(ExecutionQueue::$globalQueue);
    		}
    	}
    	return ExecutionQueue::startNew($comment);
    }
}